#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <pthread.h>
#include <sys/stat.h>

#define PORT 8080
#define BUFFER_SIZE 1024

void *handle_client(void *arg) {
    int client_socket = *(int *)arg;
    free(arg);  // απελευθέρωση της malloc από το main
    char buffer[BUFFER_SIZE] = {0};

    // 1. Λήψη filename
    read(client_socket, buffer, BUFFER_SIZE);
    char filename[BUFFER_SIZE];
    strcpy(filename, buffer);

    // 2. Λήψη offset
    memset(buffer, 0, BUFFER_SIZE);
    read(client_socket, buffer, BUFFER_SIZE);
    long offset = atol(buffer);

    // 3. Άνοιγμα αρχείου
    FILE *fp = fopen(filename, "rb");
    if (fp == NULL) {
        char *err = "ERROR: Δεν βρέθηκε το αρχείο.\n";
        send(client_socket, err, strlen(err), 0);
    } else {
        fseek(fp, offset, SEEK_SET);
        char send_buffer[BUFFER_SIZE];
        size_t bytes_read;
        while ((bytes_read = fread(send_buffer, 1, BUFFER_SIZE, fp)) > 0) {
            send(client_socket, send_buffer, bytes_read, 0);
        }
        fclose(fp);
    }

    close(client_socket);
    pthread_exit(NULL);
}

int main() {
    int server_fd;
    struct sockaddr_in address;
    int addrlen = sizeof(address);

    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);
    bind(server_fd, (struct sockaddr *)&address, sizeof(address));
    listen(server_fd, 10);

    printf("🧵 Server έτοιμος για πολλούς clients ταυτόχρονα!\n");

    while (1) {
        int *new_socket = malloc(sizeof(int));
        *new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen);

        pthread_t thread_id;
        pthread_create(&thread_id, NULL, handle_client, new_socket);
        pthread_detach(thread_id);  // δεν χρειάζεται join()
    }

    close(server_fd);
    return 0;
}
